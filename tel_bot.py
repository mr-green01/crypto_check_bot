import os
import requests
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, ContextTypes
import time

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram Bot —Ç–æ–∫–µ–Ω
TELEGRAM_TOKEN = '8043862059:AAEPhlASBOas956j3D0-ldloyIU3X8Ow4Uk'

# URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (CoinGecko API)
COINGECKO_API_URL = 'https://api.coingecko.com/api/v3/simple/price'

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
ALERT_THRESHOLDS = {
    'bitcoin': {'up': 0.15, 'down': 0.15},  # –ü–æ—Ä–æ–≥ 5% –¥–ª—è BTC –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑
    'ethereum': {'up': 0.15, 'down': 0.15}  # –ü–æ—Ä–æ–≥ 7% –¥–ª—è ETH –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑
}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
CRYPTO_DATA_FILE = 'crypto_data.json'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω
initial_prices = {}

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
def get_crypto_price(crypto_id, retries=3, delay=2):
    for _ in range(retries):
        try:
            response = requests.get(COINGECKO_API_URL, params={'ids': crypto_id, 'vs_currencies': 'usd'})
            data = response.json()
            if crypto_id in data and 'usd' in data[crypto_id]:
                return data[crypto_id]['usd']
            else:
                return None
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
            time.sleep(delay)
    return None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_crypto_data():
    if os.path.exists(CRYPTO_DATA_FILE):
        with open(CRYPTO_DATA_FILE, 'r') as file:
            return json.load(file)
    return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –≤ —Ñ–∞–π–ª
def save_crypto_data(data):
    with open(CRYPTO_DATA_FILE, 'w') as file:
        json.dump(data, file)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é API
async def set_initial_prices():
    global initial_prices
    initial_prices = load_crypto_data()
    for crypto_id in ALERT_THRESHOLDS.keys():
        if crypto_id not in initial_prices:
            price = get_crypto_price(crypto_id)
            if price is not None:
                initial_prices[crypto_id] = price
    save_crypto_data(initial_prices)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É—Ä—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_price_change(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    for crypto_id, thresholds in ALERT_THRESHOLDS.items():
        current_price = get_crypto_price(crypto_id)

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é
        if current_price is None:
            current_price = initial_prices.get(crypto_id)
            if current_price is None:
                continue  # –ï—Å–ª–∏ –∏ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω—ã –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É

        initial_price = initial_prices.get(crypto_id)
        if initial_price is None:
            initial_price = current_price  # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –Ω–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–µ–∫—É—â—É—é –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω—É—é

        price_change_percent = ((current_price - initial_price) / initial_price) * 100

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
        if price_change_percent >= thresholds['up']:
            await context.bot.send_message(job.chat_id, text=f'{crypto_id.capitalize()} –≤—ã—Ä–æ—Å –Ω–∞ {price_change_percent:.2f}%!')
            initial_prices[crypto_id] = current_price  # –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        elif price_change_percent <= -thresholds['down']:
            await context.bot.send_message(job.chat_id, text=f'{crypto_id.capitalize()} —É–ø–∞–ª –Ω–∞ {abs(price_change_percent):.2f}%!')
            initial_prices[crypto_id] = current_price  # –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    save_crypto_data(initial_prices)

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
    prices_message = "–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n"
    for crypto_id in ALERT_THRESHOLDS.keys():
        price = initial_prices.get(crypto_id)
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é
        if price is None:
            price = get_crypto_price(crypto_id)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
        if price is None:
            continue
        
        prices_message += f"{crypto_id.capitalize()}: ${price}\n"

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."
    await context.bot.send_message(chat_id, text=welcome_message)
    await context.bot.send_message(chat_id, text=prices_message)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    keyboard = [[InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ üöÄ", callback_data='start_monitoring')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
async def start_monitoring(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.callback_query.message.chat_id
    await context.bot.send_message(chat_id, text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—É—Ä—Å–∞ –∑–∞–ø—É—â–µ–Ω! –Ø —Å–æ–æ–±—â—É, –µ—Å–ª–∏ –±—É–¥—É—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
    await set_initial_prices()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JobQueue –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    context.job_queue.run_repeating(check_price_change, interval=60, first=0, chat_id=chat_id)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å JobQueue
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(start_monitoring, pattern='start_monitoring'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
